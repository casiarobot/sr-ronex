#!/usr/bin/env python
PACKAGE="sr_ronex_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *
from math import pi

gen = ParameterGenerator()

#num_adc = rospy.get_param("/ronex/adc16/1413976765/adc_inputs")

gen.add("input_mode_0", bool_t, 0,
        "Digital Pin 0 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_1", bool_t, 0,
        "Digital Pin 1 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_2", bool_t, 0,
        "Digital Pin 2 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_3", bool_t, 0,
        "Digital Pin 3 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_4", bool_t, 0,
        "Digital Pin 4 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_5", bool_t, 0,
        "Digital Pin 5 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)

command_enum_1 = gen.enum([gen.const("Single", int_t, 1,
                                     "Single ended ADC input"),
                           gen.const("Differential", int_t, 2,
                                     "Differential ADC input")],
                          "ADC input types")

adc_inputs = gen.add_group("Set ADC pin input type")

adc_inputs.add("pin_0", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_1", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_2", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_3", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_4", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_5", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_6", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_7", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_8", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_9", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_10", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_11", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_12", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_13", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_14", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)
adc_inputs.add("pin_15", int_t, 0, "Single ended or differential ADC input.", 1,
        edit_method=command_enum_1)

command_enum_2 = gen.enum([gen.const("Normal", int_t, 1,
                                     "The command for normal operation"),
                           gen.const("Config", int_t, 2,
                                     "The command to request the config")],
                          "Command Types")
gen.add("command_type", int_t, 0, "The command type to be sent.", 1,
        edit_method=command_enum_2)

exit(gen.generate(PACKAGE, "ronex", "ADC16_48pins"))
