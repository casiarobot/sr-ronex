#!/usr/bin/env python
PACKAGE="sr_ronex_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("input_mode_0", bool_t, 0,
        "Digital Pin 0 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_1", bool_t, 0,
        "Digital Pin 1 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_2", bool_t, 0,
        "Digital Pin 2 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_3", bool_t, 0,
        "Digital Pin 3 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_4", bool_t, 0,
        "Digital Pin 4 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)
gen.add("input_mode_5", bool_t, 0,
        "Digital Pin 5 - True to use digital pins as inputs, "
        "false to use them as outputs.", True)

command_enum_1 = gen.enum([gen.const("None", int_t, 0, "No ADC input"),
                           gen.const("Single", int_t, 1,
                                     "Single ended ADC input"),
                           gen.const("Differential", int_t, 2,
                                     "Differential ADC input")],
                          "ADC input types")

adc_inputs = gen.add_group("Set ADC pin input type")

adc_inputs.add("pins_0_1", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_2_3", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_4_5", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_6_7", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_8_9", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_10_11", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_12_13", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_14_15", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_16_17", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_18_19", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_20_21", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_22_23", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_24_25", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_26_27", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_28_29", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_30_31", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_32_33", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_34_35", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_36_37", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_38_39", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_40_41", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_42_43", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_44_45", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)
adc_inputs.add("pins_46_47", int_t, 1, "Single ended or differential ADC input.", 0,
        edit_method=command_enum_1)

exit(gen.generate(PACKAGE, "ronex", "ADC16"))
